{"version":3,"sources":["components/GamePage.module.css","components/ErrorPage.module.css","App.module.css","components/Deck.module.css","components/LobbyPage.module.css","services/Firebase.js","components/Deck.js","components/Player.js","components/ErrorPage.js","components/GamePage.js","components/LobbyPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","auth","db","database","Deck","props","useState","chatList","setChatList","messageEndRef","useRef","useEffect","ref","child","lobbyCode","on","snap","exists","Object","values","val","current","scrollIntoView","behavior","className","styles","Container","map","chat","index","Player","inputText","setInputText","gridRowNumber","gridColumnNumber","playerNo","toString","Error","playerContainer","backgroundColor","gridRowStart","gridColumnStart","width","height","display","flexDirection","justifyContent","alignItems","style","children","onSubmit","e","preventDefault","push","sender","playerData","timestamp","Date","now","content","type","value","onChange","target","ErrorPage","h1","GamePage","roomReadRef","location","useLocation","history","useHistory","lobbyExist","setLobbyExist","loading","setLoading","lobbyStrIndex","search","indexOf","nameStrIndex","substring","localPlayerName","playerObjDict","setPlayerObjDict","startingPlayerNo","orderByKey","equalTo","once","loadingContainer","userCorner","exitButton","onClick","entries","forEach","k","name","remove","then","process","exitIcon","exitTooltip","p","playerObj","assignedNumber","playerIndex","LobbyPage","setLobbyCode","playerName","setPlayerName","playerNameFilled","length","alert","randomAlphaNumericGenerator","randomNo","Math","floor","random","String","fromCharCode","pathname","console","log","toUpperCase","roomWriteRef","set","id","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,UAAY,4BAA4B,iBAAmB,mCAAmC,WAAa,6BAA6B,WAAa,6BAA6B,YAAc,8BAA8B,SAAW,2BAA2B,EAAI,6CAA6C,GAAK,gD,mBCA5UD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,GAAK,iD,mBCAhED,EAAOC,QAAU,CAAC,UAAY,yB,mBCA9BD,EAAOC,QAAU,CAAC,UAAY,0B,mBCA9BD,EAAOC,QAAU,CAAC,UAAY,+B,2JCgC9BC,IAASC,cANM,CACbC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,mDAKKJ,IAASK,KAAtB,IACMC,EAAKN,IAASO,W,OC/BZ,SAASC,EAAMC,GAC1B,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAgBC,iBAAO,MAgB7B,OAbAC,qBAAU,WACUT,EAAGU,MAAMC,MAAM,WAAWA,MAAMR,EAAMS,WAAWD,MAAM,QAC/DE,GAAG,SAAS,SAAAC,GACbA,EAAKC,UACJT,EAAYU,OAAOC,OAAOH,EAAKI,aAGxC,IAEHT,qBAAU,WACNF,EAAcY,QAAQC,eAAe,CAACC,SAAU,aACjD,CAAChB,IAGA,sBAAKiB,UAAWC,IAAOC,UAAvB,UACKnB,EAASoB,KAAI,SAACC,EAAMC,GAAP,OACV,8BAAuBD,EAAI,QAA3B,MAA2CA,EAAI,SAAvCA,EAAOC,MAEnB,qBAAKjB,IAAKH,OCtBP,SAASqB,EAAOzB,GAC3B,MAAkCC,mBAAS,IAA3C,mBAAOyB,EAAP,KAAkBC,EAAlB,KAEIC,EAAgB,EAChBC,EAAmB,EAMvB,OAJAvB,qBAAU,cACP,IAGIN,EAAM8B,SAASC,YAClB,IAAK,IACDH,EAAgB,EAChBC,EAAmB,EACnB,MACJ,IAAK,IACDD,EAAgB,EAChBC,EAAmB,EACnB,MACJ,IAAK,IACDD,EAAgB,EAChBC,EAAmB,EACnB,MACJ,IAAK,IACDD,EAAgB,EAChBC,EAAmB,EACnB,MACJ,QACI,MAAM,IAAIG,MAAM,yBAGxB,IAAIC,EAAkB,CAClBC,gBAAiB,QACjBC,aAAa,GAAD,OAAKP,GACjBQ,gBAAgB,GAAD,OAAKP,GACpBQ,MAAO,OACPC,OAAQ,OAERC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAa,UAgBjB,OACI,sBAAKC,MAAOV,EAAZ,UACI,4BAAIjC,EAAM4C,WACU,IAAnB5C,EAAM8B,UACH,sBAAMe,SAjBI,SAACC,GACnBA,EAAEC,iBAGclD,EAAGU,MAAMC,MAAM,WAAWA,MAAMR,EAAMS,WAAWD,MAAM,QAC/DwC,KAAK,CACTC,OAAQjD,EAAMkD,WAAN,KACRC,UAAWC,KAAKC,MAChBC,QAAS5B,IAEbC,EAAa,KAOL,SACI,uBAAO4B,KAAK,OAAOC,MAAO9B,EAAW+B,SAAU,SAACX,GAAD,OAAOnB,EAAamB,EAAEY,OAAOF,e,qDClEjF,SAASG,EAAU3D,GAC9B,OACI,qBAAKmB,UAAWC,IAAOC,UAAvB,SACI,oBAAIF,UAAWC,IAAOwC,GAAtB,SAA2B5D,EAAM4C,aCK9B,SAASiB,IACpB,IAAMC,EAAcjE,EAAGU,MAAMC,MAAT,WACduD,EAAWC,cACXC,EAAUC,cAEhB,EAAoCjE,oBAAS,GAA7C,mBAAOkE,EAAP,KAAmBC,EAAnB,KACA,EAA8BnE,oBAAS,GAAvC,mBAAOoE,EAAP,KAAgBC,EAAhB,KAEMC,EAAgBR,EAASS,OAAOC,QAAQ,SACxCC,EAAeX,EAASS,OAAOC,QAAQ,SAGvChE,EAAYsD,EAASS,OAAOG,UAAUJ,EAAgB,EAAGG,EAAe,GACxEE,EAAkBb,EAASS,OAAOG,UAAUD,EAAe,GAEjE,EAA0CzE,mBAAS,IAAnD,mBAAO4E,EAAP,KAAsBC,EAAtB,KACIC,EAAmB,EAEvBzE,qBAAU,WACH6D,GACyBL,EAAYtD,MAAMC,GAC1BC,GAAG,SAAS,SAAAC,GACrBA,EAAKC,UAAWkE,EAAiBnE,EAAKI,MAAL,cAG7C,CAACoD,IAEJ7D,qBAAU,WACQwD,EAAYkB,aAAaC,QAAQxE,GACzCyE,KAAK,SAAS,SAAAvE,GAChByD,EAAczD,EAAKC,UACnB0D,GAAW,QAEhB,CAAC7D,IAoBJ,OAAG4D,EAEK,qBAAKlD,UAAWC,IAAO+D,iBAAvB,SACI,oBAAIhE,UAAWC,IAAOwC,GAAtB,0BAKJO,EACA,sBAAKhD,UAAWC,IAAOC,UAAvB,UACI,sBAAKF,UAAWC,IAAOgE,WAAvB,UACI,yBAAQjE,UAAWC,IAAOiE,WAAYC,QAAS,kBA1B3DzE,OAAO0E,QAAQV,GAAeW,SAAQ,YAAa,IAAD,mBAAVC,EAAU,UACzCC,OAASd,GAEVd,EAAYtD,MAAZ,UAAqBC,EAArB,oBAA0CgF,IAAKE,YAI/B7B,EAAYtD,MAAZ,UAAqBC,EAArB,aACRyE,KAAK,SAAS,SAAAvE,GACtBA,EAAKC,UAAUkD,EAAYtD,MAAMC,GAAWkF,SAASC,KAAK3B,EAAQjB,KAAK6C,mBAG/E5B,EAAQjB,KAAK6C,WAcD,UACI,cAAC,IAAD,CAAe1E,UAAWC,IAAO0E,WACjC,mBAAG3E,UAAWC,IAAO2E,YAArB,qBAEJ,oBAAG5E,UAAWC,IAAO4E,EAArB,mBAA+BvF,QAGlCI,OAAOC,OAAO+D,GAAevD,KAAI,SAAC2E,EAAWzE,GAE1C,IAAM0E,EAAiBD,EAAS,OAAarB,EAAkB,EAAIG,IACnE,OAAO,cAACtD,EAAD,CAA6ByB,WAAY+C,EAAWE,YAAa3E,EAAOf,UAAWA,EAAWqB,SAAUoE,EAAxG,SAAyHD,EAAS,MAArHC,MAExB,cAACnG,EAAD,CAAMU,UAAWA,OAEnB,cAACkD,EAAD,kC,qBCnFC,SAASyC,IACpB,IAAMnC,EAAUC,cACZ,EAA4BjE,mBAAS,IAAzC,mBAAKQ,EAAL,KAAgB4F,EAAhB,KACI,EAA8BpG,mBAAS,IAA3C,mBAAKqG,EAAL,KAAiBC,EAAjB,KAEMzC,EAAcjE,EAAGU,MAAMC,MAAT,WAGdgG,EAAmB,WACrB,OAAyB,IAAtBF,EAAWG,SACVC,MAAM,wBACC,IAmCTC,EAA8B,WAIhC,IAAIC,EAAWC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE/B,OAAGH,EAAW,GAAWA,EAAS7E,WACtBiF,OAAOC,aAAa,GAAKL,IAoCzC,OACI,sBAAKzF,UAAWC,IAAOC,UAAvB,UACI,2CACA,uBAAMwB,SA3EY,SAACC,IACvBA,EAAEC,iBAEEyD,KAAoC,KAAd/F,KAGZqD,EAAYkB,aAAaC,QAAQxE,GACzCyE,KAAK,SAAS,SAAAvE,GAChB,GAAGA,EAAKC,SAAS,CAIb,GAHiBD,EAAKI,MAAMN,GAAX,QAGHgG,QAAU,EACpB,OAGkB3C,EAAYtD,MAAZ,UAAqBC,IAAaD,MAAM,WAChDwC,KAAK,CAAC0C,KAAMY,IAAaV,KAAK3B,EAAQjB,KAAK,CACrDkE,SAAUrB,QACVrB,OAAO,SAAD,OAAW/D,EAAX,iBAA6B6F,WAIvCa,QAAQC,IAAI,0BAEpBf,EAAa,MAkDT,UACI,uBAAO7C,MAAO/C,EAAWgD,SAAU,SAACX,GAAD,OAAOuD,EAAavD,EAAEY,OAAOF,MAAM6D,gBAAgB9D,KAAK,SAC3F,wBAAQA,KAAK,SAAb,mBACA,wBAAQ+B,QAtCO,SAACxC,GAGxB,GAFAA,EAAEC,iBAEEyD,IAAJ,CAIA/F,EAAYkG,IAAgCA,IAAgCA,IAAgCA,IAG9F7C,EAAYkB,aAAaC,QAAQxE,GACzCyE,KAAK,SAAS,SAAAvE,GACbA,EAAKC,WACJH,EAAYkG,IAAgCA,IAAgCA,IAAgCA,QAIpH,IAAMW,EAAezH,EAAGU,MAAMC,MAAT,kBAA0BC,IAC/C6G,EAAaC,IAAI,CACbC,GAAI/G,IAER6G,EAAa9G,MAAM,WAAWwC,KAAK,CAC/B0C,KAAMY,IAIVrC,EAAQjB,KAAK,CACTkE,SAAUrB,QACVrB,OAAO,SAAD,OAAW/D,EAAX,iBAA6B6F,OAU/B,4BAEJ,4CACA,uBAAO9C,MAAO8C,EAAY7C,SAAU,SAACX,GAAD,OAAOyD,EAAczD,EAAEY,OAAOF,QAAQD,KAAK,Y,YClF5EkE,MAff,WACE,OACE,qBAAKtG,UAAWC,IAAOC,UAAvB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOqG,KAAK,IAAIC,OAAK,EAACC,UAAWxB,IACjC,cAAC,IAAD,CAAOsB,KAAM7B,SAAqC8B,OAAK,EAACC,UAAWxB,IACnE,cAAC,IAAD,CAAOsB,KAAM7B,QAAoC8B,OAAK,EAACC,UAAW/D,IAClE,cAAC,IAAD,CAAO6D,KAAK,IAAIE,UAAW,kBAAM,cAACjE,EAAD,4CCF5BkE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8a6ecfb2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"GamePage_Container__N989G\",\"loadingContainer\":\"GamePage_loadingContainer__1Zro2\",\"userCorner\":\"GamePage_userCorner__2EhId\",\"exitButton\":\"GamePage_exitButton__gUP_W\",\"exitTooltip\":\"GamePage_exitTooltip__1j4t5\",\"exitIcon\":\"GamePage_exitIcon__xTmUJ\",\"p\":\"GamePage_p__1626i index_generalText__2dy3_\",\"h1\":\"GamePage_h1__1lcBd index_generalText__2dy3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ErrorPage_Container__1I_k7\",\"h1\":\"ErrorPage_h1__2UsE6 index_generalText__2dy3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__3iFbT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Deck_Container__deUXb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"LobbyPage_Container__3w_jx\"};","// <!-- The core Firebase JS SDK is always required and must be listed first -->\n// <script src=\"https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js\"></script>\n\n// <!-- TODO: Add SDKs for Firebase products that you want to use\n//      https://firebase.google.com/docs/web/setup#available-libraries -->\n// <script src=\"https://www.gstatic.com/firebasejs/8.6.8/firebase-analytics.js\"></script>\n\n// <script>\n//   // Your web app's Firebase configuration\n//   // For Firebase JS SDK v7.20.0 and later, measurementId is optional\n//   var firebaseConfig = {\n  //   apiKey: \"AIzaSyA__laCqzqZe3MmI3_TC_F1ywdMvo4vprg\",\n  //   authDomain: \"big2-4e418.firebaseapp.com\",\n  //   databaseURL: \"https://big2-4e418-default-rtdb.firebaseio.com\",\n  //   projectId: \"big2-4e418\",\n  //   storageBucket: \"big2-4e418.appspot.com\",\n  //   messagingSenderId: \"1014909594305\",\n  //   appId: \"1:1014909594305:web:b10ee15f534c95eb6f8240\",\n  //   measurementId: \"G-PMYKH1SK0L\"\n  // };\n//   // Initialize Firebase\n//   firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\n// </script>\n\nimport firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyA__laCqzqZe3MmI3_TC_F1ywdMvo4vprg\",\n  authDomain: \"big2-4e418.firebaseapp.com\",\n  databaseURL: \"https://big2-4e418-default-rtdb.firebaseio.com\"\n};\n\nfirebase.initializeApp(config); \n\nexport const auth = firebase.auth;\nexport const db = firebase.database();","/* eslint-disable react-hooks/exhaustive-deps */\nimport styles from './Deck.module.css'\nimport { db } from '../services/Firebase'\nimport { useEffect, useState, useRef } from 'react'\n\nexport default function Deck (props){\n    const [chatList, setChatList] = useState([])\n    const messageEndRef = useRef(null)\n\n    // Connect deck to firebase\n    useEffect(() => {\n        const deckRef = db.ref().child('Lobbies').child(props.lobbyCode).child('deck')\n        deckRef.on('value', snap => {\n            if(snap.exists()) {\n                setChatList(Object.values(snap.val()))\n            }\n        })\n    }, [])\n\n    useEffect(() => {\n        messageEndRef.current.scrollIntoView({behavior: \"smooth\"})\n    }, [chatList])\n\n    return(\n        <div className={styles.Container}>\n            {chatList.map((chat, index) =>\n                <p key={chat + index}>{chat['content']} - {chat['sender']}</p>\n            )}\n            <div ref={messageEndRef}/>\n        </div>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { db } from \"../services/Firebase\";\n\n/* Prop: \nplayerNo = Determines where the player will be showned locally on screen, client should always be Player1\n*/\nexport default function Player(props){\n    const [inputText, setInputText] = useState('')\n\n    var gridRowNumber = 0;\n    var gridColumnNumber = 0;\n\n    useEffect(() => {\n    }, [])\n\n    // Update gridRowNumber and gridColumnNumber based on local player number\n    switch(props.playerNo.toString()){\n        case '1':\n            gridRowNumber = 3\n            gridColumnNumber = 3\n            break;\n        case '2':\n            gridRowNumber = 2\n            gridColumnNumber = 5\n            break;\n        case '3':\n            gridRowNumber = 1\n            gridColumnNumber = 3\n            break;\n        case '4':\n            gridRowNumber = 2\n            gridColumnNumber = 1\n            break;\n        default:\n            throw new Error(\"Invalid Player Number\")\n    }\n\n    var playerContainer = {\n        backgroundColor: 'beige',\n        gridRowStart: `${gridRowNumber}`,\n        gridColumnStart: `${gridColumnNumber}`,\n        width: '100%',\n        height: '100%',\n\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems:  'center'\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        // TODO: Send text to the deck\n        const deckRef = db.ref().child('Lobbies').child(props.lobbyCode).child('deck')\n        deckRef.push({\n            sender: props.playerData['name'],\n            timestamp: Date.now(),\n            content: inputText\n        })\n        setInputText('')\n    }\n\n    return(\n        <div style={playerContainer}>\n            <p>{props.children}</p>\n            {props.playerNo === 1 &&\n                <form onSubmit={submitHandler}>\n                    <input type=\"text\" value={inputText} onChange={(e) => setInputText(e.target.value)}/>\n                </form>\n            }\n        </div>\n    );\n}","import styles from './ErrorPage.module.css'\n\nexport default function ErrorPage(props){\n    return(\n        <div className={styles.Container}>\n            <h1 className={styles.h1}>{props.children}</h1>\n        </div>\n    )\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport Deck from './Deck.js';\nimport Player from './Player.js'\nimport styles from './GamePage.module.css'\nimport {db} from '../services/Firebase'\nimport { useLocation, useHistory } from 'react-router';\nimport { useEffect, useState } from 'react'\nimport { IoExitOutline } from 'react-icons/io5'\nimport ErrorPage from './ErrorPage.js';\n\nexport default function GamePage(){\n    const roomReadRef = db.ref().child(`Lobbies`)\n    const location = useLocation()\n    const history = useHistory()\n\n    const [lobbyExist, setLobbyExist] = useState(false);\n    const [loading, setLoading] = useState(true)\n\n    const lobbyStrIndex = location.search.indexOf('code=')\n    const nameStrIndex = location.search.indexOf('name=')\n\n    // Get the lobby code and local player name from the Url\n    const lobbyCode = location.search.substring(lobbyStrIndex + 5, nameStrIndex - 1)\n    const localPlayerName = location.search.substring(nameStrIndex + 5)\n\n    const [playerObjDict, setPlayerObjDict] = useState([])\n    var startingPlayerNo = 2\n\n    useEffect(() => {\n        if(lobbyExist){\n            const playerListQuery = roomReadRef.child(lobbyCode)\n            playerListQuery.on('value', snap => {\n                if(snap.exists()) {setPlayerObjDict(snap.val()['players']) }\n            })  \n        }\n    }, [lobbyExist])\n\n    useEffect(() => {\n        const query = roomReadRef.orderByKey().equalTo(lobbyCode)\n        query.once('value', snap => {\n            setLobbyExist(snap.exists())\n            setLoading(false)\n        })\n    }, [lobbyCode])\n    \n    // Handles when local player exit the game lobby\n    // If last person to exit, delete the lobby\n    const exitHandler = () => {\n        Object.entries(playerObjDict).forEach(([k, v]) => {\n            if(v.name === localPlayerName){\n                // Remove the player from the players list\n                roomReadRef.child(`${lobbyCode}/players/${k}`).remove()\n            }\n        })\n\n        const playerListQuery = roomReadRef.child(`${lobbyCode}/players`)\n        playerListQuery.once('value', snap => {\n            if(!snap.exists()) roomReadRef.child(lobbyCode).remove().then(history.push(process.env.REACT_APP_LOBBYPAGE_URL))\n        })\n        \n        history.push(process.env.REACT_APP_LOBBYPAGE_URL)\n    }\n\n    if(loading){\n        return (\n            <div className={styles.loadingContainer}>\n                <h1 className={styles.h1}>Loading...</h1>\n            </div>\n        )\n    }else{\n        return( \n            lobbyExist ?\n            <div className={styles.Container}>\n                <div className={styles.userCorner}>\n                    <button className={styles.exitButton} onClick={() => exitHandler()}>\n                        <IoExitOutline className={styles.exitIcon}/>\n                        <p className={styles.exitTooltip}>Exit</p>\n                    </button>\n                    <p className={styles.p}>CODE: {lobbyCode}</p>\n                </div>\n\n                {Object.values(playerObjDict).map((playerObj, index) => {\n                    // Make sure local player gets 1 as assigned number, and everyone else starts from 2\n                    const assignedNumber = playerObj['name'] === localPlayerName ? 1 : startingPlayerNo++\n                    return(<Player key={assignedNumber} playerData={playerObj} playerIndex={index} lobbyCode={lobbyCode} playerNo={assignedNumber}>{playerObj['name']}</Player>)\n                })}\n                <Deck lobbyCode={lobbyCode}/>\n            </div> \n            : <ErrorPage>404 Lobby not found</ErrorPage>\n        )\n    }\n}","import { useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport {db} from '../services/Firebase'\nimport styles from './LobbyPage.module.css'\n\nexport default function LobbyPage(){\n    const history = useHistory()\n    var [lobbyCode, setLobbyCode] = useState('')\n    var [playerName, setPlayerName] = useState('')\n\n    const roomReadRef = db.ref().child(`Lobbies`)\n\n    // Check if player name field is filled, if not, show an alert and return false\n    const playerNameFilled = () => {\n        if(playerName.length === 0){\n            alert('Please enter a name')\n            return false\n        }\n        return true\n    }\n\n    // Handles when use click Enter to enter a lobby\n    const lobbyEnterHandler = (e) => {\n        e.preventDefault()\n\n        if(!playerNameFilled() || lobbyCode === '')\n            return\n\n        const query = roomReadRef.orderByKey().equalTo(lobbyCode)\n        query.once('value', snap => {\n            if(snap.exists()){\n                let playerList = snap.val()[lobbyCode]['players']\n\n                //TODO: Display proper error here on UI\n                if(playerList.length >= 4){\n                    return\n                }\n\n                const playerReadRef = roomReadRef.child(`${lobbyCode}`).child('players')\n                playerReadRef.push({name: playerName}).then(history.push({\n                    pathname: process.env.REACT_APP_GAMEPAGE_URL,\n                    search: `?code=${lobbyCode}&name=${playerName}`\n                }))\n            }\n            else\n                console.log(\"Lobby doesn't exist\")\n        })\n        setLobbyCode('')\n    }\n\n    // Random Code Generator: Generate 4 letter combination, each letter is random from 0-9, A-Z.\n    const randomAlphaNumericGenerator = () => {\n        // Generate a number from 0 - 35 \n        // If number is 0 - 9, convert directly to char\n        // if number is 10-35, add 55 to get ASCII code of Alphabet letter\n        var randomNo = Math.floor(Math.random() * 36)\n        \n        if(randomNo < 10) return randomNo.toString()\n        else return String.fromCharCode(55 + randomNo)\n    }\n\n    // Handles when the user click \"Create\" button to create a new room\n    const lobbyCreateHandler = (e) => {\n        e.preventDefault()\n\n        if(!playerNameFilled())\n            return\n        \n        // Generate 4 letter code\n        lobbyCode = randomAlphaNumericGenerator() + randomAlphaNumericGenerator() + randomAlphaNumericGenerator() + randomAlphaNumericGenerator()\n\n        // Check if the generated code already exist, if so, generate again\n        const query = roomReadRef.orderByKey().equalTo(lobbyCode)\n        query.once('value', snap => {\n            if(snap.exists()){\n                lobbyCode = randomAlphaNumericGenerator() + randomAlphaNumericGenerator() + randomAlphaNumericGenerator() + randomAlphaNumericGenerator()\n            }\n        })\n\n        const roomWriteRef = db.ref().child(`Lobbies/${lobbyCode}`)\n        roomWriteRef.set({\n            id: lobbyCode\n        })\n        roomWriteRef.child('players').push({\n            name: playerName\n        })\n        \n        // Redirect to Game Page\n        history.push({\n            pathname: process.env.REACT_APP_GAMEPAGE_URL,\n            search: `?code=${lobbyCode}&name=${playerName}`\n        })\n    }\n\n    return(\n        <div className={styles.Container}>\n            <p>LOBBY CODE</p>\n            <form onSubmit={lobbyEnterHandler}>\n                <input value={lobbyCode} onChange={(e) => setLobbyCode(e.target.value.toUpperCase())} type=\"text\"/>\n                <button type=\"submit\">Enter</button>\n                <button onClick={lobbyCreateHandler}>Create Room</button>\n            </form>\n            <p>PLAYER NAME</p>\n            <input value={playerName} onChange={(e) => setPlayerName(e.target.value)} type=\"text\"/>\n        </div>\n    )\n}","import styles from './App.module.css';\nimport GamePage from './components/GamePage';\nimport LobbyPage from './components/LobbyPage'\nimport {Switch, Route, HashRouter} from 'react-router-dom'\nimport ErrorPage from './components/ErrorPage';\n\nfunction App() {\n  return (\n    <div className={styles.Container}>\n      <HashRouter>\n        <Switch>\n          <Route path='/' exact component={LobbyPage} />\n          <Route path={process.env.REACT_APP_LOBBYPAGE_URL} exact component={LobbyPage} />\n          <Route path={process.env.REACT_APP_GAMEPAGE_URL} exact component={GamePage}/>\n          <Route path=\"*\" component={() => <ErrorPage>404 Page not found</ErrorPage>}/>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}